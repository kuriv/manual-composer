{"./":{"url":"./","title":"Composer","keywords":"","body":"Composer Composer 是 PHP 的一个依赖管理工具。 它允许你申明项目所依赖的代码库，并在你的项目中安装它们。 "},"docs/安装 Composer.html":{"url":"docs/安装 Composer.html","title":"安装 Composer","keywords":"","body":"安装 Composer 执行下面的命令，在 Linux / Unix / macOS 下安装 Composer ，并且可以在系统中全局调用。 curl -sS https://getcomposer.org/installer | php sudo mv composer.phar /usr/local/bin/composer 在 Windows 下安装只需下载并运行 安装程序 ，它将安装最新版本的 Composer ，并设置好系统的环境变量。 "},"docs/初始化.html":{"url":"docs/初始化.html","title":"初始化","keywords":"","body":"初始化 执行下面的命令，它会以交互方式要求你填写一些信息。 composer init 执行完毕后， Composer 自动创建了 composer.json 这个文件。 "},"docs/配置文件.html":{"url":"docs/配置文件.html","title":"配置文件","keywords":"","body":"配置文件 要开始在你的项目中使用 Composer ，只需要一个 composer.json 文件。 { \"name\": \"kuriv/manual-composer\", \"description\": \"Composer 手册\", \"type\": \"project\", \"license\": \"MIT\", \"authors\": [ { \"name\": \"Kuriv Vesti\", \"email\": \"kuri.personal@gmail.com\" } ], \"minimum-stability\": \"stable\", \"require\": {} } "},"docs/版本约束.html":{"url":"docs/版本约束.html","title":"版本约束","keywords":"","body":"版本约束 名称 实例 描述 版本号 1.0.2 指定版本号 版本范围 >=1.0, 指定版本范围 通配符 1.0.* >=1.0, 波浪号 ~1.2 ~1.2.3 >=1.2, >=1.2.3, 折音号 ^1.2 ^1.2.3 >=1.2, >=1.2.3, "},"docs/创建项目.html":{"url":"docs/创建项目.html","title":"创建项目","keywords":"","body":"创建项目 可以通过执行下面的命令，创建一个新的项目到 develop 目录中。 composer create-project laravel/laravel develop composer create-project laravel/laravel develop \"6.*\" "},"docs/声明依赖.html":{"url":"docs/声明依赖.html","title":"声明依赖","keywords":"","body":"声明依赖 可以通过执行下面的命令，增加新的依赖包到当前目录的 composer.json 文件中。 composer require monolog/monolog composer require monolog/monolog \"^1.2\" 在添加或修改依赖后，对应的依赖关系将被安装或者更新。 "},"docs/安装依赖.html":{"url":"docs/安装依赖.html","title":"安装依赖","keywords":"","body":"安装依赖 执行下面的命令，从当前目录读取 composer.json 文件，处理依赖关系，并把其安装到 vendor 目录下。 composer install 如果当前目录下存在 composer.lock 文件，它会从此文件读取依赖版本，而不是根据 composer.json 文件去获取依赖。如果没有 composer.lock 文件， Composer 将在处理完依赖关系后创建它。 "},"docs/更新依赖.html":{"url":"docs/更新依赖.html","title":"更新依赖","keywords":"","body":"更新依赖 执行下面的命令，获取依赖的最新版本，并且更新 composer.lock 文件。 composer update 这将解决项目的所有依赖，并将确切的版本号写入 composer.lock 文件。 "},"docs/删除依赖.html":{"url":"docs/删除依赖.html","title":"删除依赖","keywords":"","body":"删除依赖 可以通过执行下面的命令，删除指定的依赖包。 composer remove monolog/monolog 在删除依赖后，对应的依赖关系将被更新。 "},"docs/打印自动加载索引.html":{"url":"docs/打印自动加载索引.html","title":"打印自动加载索引","keywords":"","body":"打印自动加载索引 某些情况下你需要更新自动加载器，例如在你的包中引入了一个新的类。可以使用下面的命令来完成，而不必执行 composer install 或 composer update 命令。 composer dump-autoload "},"docs/自动加载.html":{"url":"docs/自动加载.html","title":"自动加载","keywords":"","body":"自动加载 对于库的自动加载， Composer 生成了一个 vendor/autoload.php 文件。你可以引入这个文件，得到一个自动加载器。 require __DIR__ . '/vendor/autoload.php'; Composer 提供了自己的自动加载器，如果你不想使用它，可以仅仅引入 vendor/composer/autoload_*.php 文件，它返回一个关联数组，你可以通过这个关联数组配置自己的自动加载器。 "},"docs/全局目录.html":{"url":"docs/全局目录.html","title":"全局目录","keywords":"","body":"全局目录 执行下面的命令，查看 Composer 的全局目录。 composer global config bin-dir --absolute "},"docs/使用镜像.html":{"url":"docs/使用镜像.html","title":"使用镜像","keywords":"","body":"使用镜像 执行下面的命令，使用镜像加速。 composer config -g repo.packagist composer https://mirrors.aliyun.com/composer/ "},"docs/发布包到 Packagist.html":{"url":"docs/发布包到 Packagist.html","title":"发布包到 Packagist","keywords":"","body":"发布包到 Packagist 前往 Packagist 官方网站 ，按照要求填写要发布的包的 GitHub 仓库地址，然后点击提交即可。 "},"docs/配置 Packagist 包自动更新.html":{"url":"docs/配置 Packagist 包自动更新.html","title":"配置 Packagist 包自动更新","keywords":"","body":"配置 Packagist 包自动更新 在成功发布包到 Packagist 之后，包还无法实现自动更新。此时需要返回到 GitHub 仓库，选择 Settings - Webhooks ，点击 Add webhook ，关于参数的配置可以 参考文档 ，然后点击提交即可。 "}}